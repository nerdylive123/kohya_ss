<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="originalContent" value="# syntax=docker/dockerfile:1&#10;ARG UID=1000&#10;ARG VERSION=EDGE&#10;ARG RELEASE=0&#10;&#10;########################################&#10;# Base stage&#10;########################################&#10;FROM docker.io/library/python:3.11-slim-bookworm AS base&#10;&#10;# RUN mount cache for multi-arch: https://github.com/docker/buildx/issues/549#issuecomment-1788297892&#10;ARG TARGETARCH&#10;ARG TARGETVARIANT&#10;&#10;WORKDIR /tmp&#10;&#10;ENV NVIDIA_VISIBLE_DEVICES=all&#10;ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility&#10;&#10;# Install CUDA partially&#10;# https://docs.nvidia.com/cuda/cuda-installation-guide-linux/#debian&#10;# Installing the complete CUDA Toolkit system-wide usually adds around 8GB to the image size.&#10;# Since most CUDA packages already installed through pip, there's no need to download the entire toolkit.&#10;# Therefore, we opt to install only the essential libraries.&#10;# Here is the package list for your reference: https://developer.download.nvidia.com/compute/cuda/repos/debian12/x86_64&#10;&#10;ADD https://developer.download.nvidia.com/compute/cuda/repos/debian12/x86_64/cuda-keyring_1.1-1_all.deb /tmp/cuda-keyring_x86_64.deb&#10;RUN --mount=type=cache,id=apt-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/var/cache/apt \&#10;    --mount=type=cache,id=aptlists-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/var/lib/apt/lists \&#10;    dpkg -i cuda-keyring_x86_64.deb &amp;&amp; \&#10;    rm -f cuda-keyring_x86_64.deb &amp;&amp; \&#10;    apt-get update &amp;&amp; \&#10;    apt-get install -y --no-install-recommends \&#10;    # !If you experience any related issues, replace the following line with `cuda-12-8` to obtain the complete CUDA package.&#10;    cuda-nvcc-12-8&#10;&#10;ENV PATH=&quot;/usr/local/cuda/bin:$PATH&quot;&#10;ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64&#10;ENV CUDA_VERSION=12.8&#10;ENV NVIDIA_REQUIRE_CUDA=cuda&gt;=12.8&#10;ENV CUDA_HOME=/usr/local/cuda&#10;&#10;########################################&#10;# Build stage&#10;########################################&#10;FROM base AS build&#10;&#10;# RUN mount cache for multi-arch: https://github.com/docker/buildx/issues/549#issuecomment-1788297892&#10;ARG TARGETARCH&#10;ARG TARGETVARIANT&#10;&#10;WORKDIR /app&#10;&#10;# Install uv&#10;COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/&#10;&#10;ENV UV_PROJECT_ENVIRONMENT=/venv&#10;ENV VIRTUAL_ENV=/venv&#10;ENV UV_LINK_MODE=copy&#10;ENV UV_PYTHON_DOWNLOADS=0&#10;ENV UV_INDEX=https://download.pytorch.org/whl/cu128&#10;&#10;# Install build dependencies&#10;RUN --mount=type=cache,id=apt-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/var/cache/apt \&#10;    --mount=type=cache,id=aptlists-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/var/lib/apt/lists \&#10;    apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; \&#10;    apt-get install -y --no-install-recommends python3-launchpadlib git curl&#10;&#10;# Install big dependencies separately for layer caching&#10;# !Please note that the version restrictions should be the same as pyproject.toml&#10;# No packages listed should be removed in the next `uv sync` command&#10;# If this happens, please update the version restrictions or update the uv.lock file&#10;RUN --mount=type=cache,id=uv-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/root/.cache/uv \&#10;    uv venv --system-site-packages /venv &amp;&amp; \&#10;    uv pip install --no-deps \&#10;    # torch (1.0GiB)&#10;    torch==2.7.0+cu128 \&#10;    # triton (149.3MiB)&#10;    triton&gt;=3.1.0 \&#10;    # tensorflow (615.0MiB)&#10;    tensorflow&gt;=2.16.1 \&#10;    # onnxruntime-gpu (215.7MiB)&#10;    onnxruntime-gpu==1.19.2&#10;&#10;# Install dependencies&#10;RUN --mount=type=cache,id=uv-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/root/.cache/uv \&#10;    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \&#10;    --mount=type=bind,source=uv.lock,target=uv.lock \&#10;    --mount=type=bind,source=sd-scripts,target=sd-scripts,rw \&#10;    uv sync --frozen --no-dev --no-install-project --no-editable&#10;&#10;# Replace pillow with pillow-simd (Only for x86)&#10;ARG TARGETPLATFORM&#10;RUN --mount=type=cache,id=apt-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/var/cache/apt \&#10;    --mount=type=cache,id=aptlists-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/var/lib/apt/lists \&#10;    if [ &quot;$TARGETPLATFORM&quot; = &quot;linux/amd64&quot; ]; then \&#10;    apt-get update &amp;&amp; apt-get install -y --no-install-recommends zlib1g-dev libjpeg62-turbo-dev build-essential &amp;&amp; \&#10;    uv pip uninstall pillow &amp;&amp; \&#10;    CC=&quot;cc -mavx2&quot; uv pip install pillow-simd; \&#10;    fi&#10;&#10;# Install jupyterlab&#10;RUN --mount=type=cache,id=uv-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/root/.cache/uv \&#10;    uv pip install jupyterlab&#10;&#10;########################################&#10;# Final stage&#10;########################################&#10;FROM base AS final&#10;&#10;ARG TARGETARCH&#10;ARG TARGETVARIANT&#10;&#10;WORKDIR /tmp&#10;&#10;# Install runtime dependencies&#10;RUN --mount=type=cache,id=apt-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/var/cache/apt \&#10;    --mount=type=cache,id=aptlists-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/var/lib/apt/lists \&#10;    apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; \&#10;    apt-get install -y --no-install-recommends libgl1 libglib2.0-0 libjpeg62 libtcl8.6 libtk8.6 libgoogle-perftools-dev dumb-init&#10;&#10;# Fix missing libnvinfer7&#10;RUN ln -s /usr/lib/x86_64-linux-gnu/libnvinfer.so /usr/lib/x86_64-linux-gnu/libnvinfer.so.7 &amp;&amp; \&#10;    ln -s /usr/lib/x86_64-linux-gnu/libnvinfer_plugin.so /usr/lib/x86_64-linux-gnu/libnvinfer_plugin.so.7&#10;&#10;# Create user&#10;ARG UID&#10;RUN groupadd -g $UID $UID &amp;&amp; \&#10;    useradd -l -u $UID -g $UID -m -s /bin/sh -N $UID&#10;&#10;# Create directories with correct permissions&#10;RUN install -d -m 775 -o $UID -g 0 /dataset &amp;&amp; \&#10;    install -d -m 775 -o $UID -g 0 /licenses &amp;&amp; \&#10;    install -d -m 775 -o $UID -g 0 /app &amp;&amp; \&#10;    install -d -m 775 -o $UID -g 0 /venv&#10;&#10;# Copy licenses (OpenShift Policy)&#10;COPY --link --chmod=775 LICENSE.md /licenses/LICENSE.md&#10;&#10;# Copy dependencies and code (and support arbitrary uid for OpenShift best practice)&#10;COPY --link --chown=$UID:0 --chmod=775 --from=build /venv /venv&#10;COPY --link --chown=$UID:0 --chmod=775 . /app&#10;&#10;RUN chmod +x /app/run.sh&#10;&#10;ENV PATH=&quot;/venv/bin:$PATH&quot;&#10;ENV PYTHONPATH=&quot;/venv/lib/python3.11/site-packages&quot;&#10;&#10;ENV LD_LIBRARY_PATH=&quot;/venv/lib/python3.11/site-packages/nvidia/cudnn/lib:$LD_LIBRARY_PATH&quot;&#10;ENV LD_PRELOAD=libtcmalloc.so&#10;ENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python&#10;&#10;# Rich logging&#10;# https://rich.readthedocs.io/en/stable/console.html#interactive-mode&#10;ENV FORCE_COLOR=&quot;true&quot;&#10;ENV COLUMNS=&quot;100&quot;&#10;&#10;WORKDIR /app&#10;&#10;VOLUME [ &quot;/dataset&quot; ]&#10;&#10;# 7860: Kohya GUI&#10;# 8888: JupyterLab&#10;EXPOSE 7860 8888&#10;&#10;USER $UID&#10;&#10;STOPSIGNAL SIGINT&#10;RUN chmod +x /app/run.sh&#10;# Use dumb-init as PID 1 to handle signals properly&#10;ENTRYPOINT [&quot;dumb-init&quot;, &quot;--&quot;]&#10;CMD [&quot;/app/run.sh&quot;]&#10;&#10;ARG VERSION&#10;ARG RELEASE&#10;LABEL name=&quot;bmaltais/kohya_ss&quot; \&#10;    vendor=&quot;bmaltais&quot; \&#10;    maintainer=&quot;bmaltais&quot; \&#10;    # Dockerfile source repository&#10;    url=&quot;https://github.com/bmaltais/kohya_ss&quot; \&#10;    version=${VERSION} \&#10;    # This should be a number, incremented with each change&#10;    release=${RELEASE} \&#10;    io.k8s.display-name=&quot;kohya_ss&quot; \&#10;    summary=&quot;Kohya's GUI: This repository provides a Gradio GUI for Kohya's Stable Diffusion trainers(https://github.com/kohya-ss/sd-scripts).&quot; \&#10;    description=&quot;The GUI allows you to set the training parameters and generate and run the required CLI commands to train the model. This is the docker image for Kohya's GUI. For more information about this tool, please visit the following website: https://github.com/bmaltais/kohya_ss.&quot;&#10;" />
              <option name="updatedContent" value="# syntax=docker/dockerfile:1&#10;ARG UID=1000&#10;ARG VERSION=EDGE&#10;ARG RELEASE=0&#10;&#10;########################################&#10;# Base stage&#10;########################################&#10;FROM docker.io/library/python:3.11-slim-bookworm AS base&#10;&#10;# RUN mount cache for multi-arch: https://github.com/docker/buildx/issues/549#issuecomment-1788297892&#10;ARG TARGETARCH&#10;ARG TARGETVARIANT&#10;&#10;WORKDIR /tmp&#10;&#10;ENV NVIDIA_VISIBLE_DEVICES=all&#10;ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility&#10;&#10;# Install CUDA partially&#10;# https://docs.nvidia.com/cuda/cuda-installation-guide-linux/#debian&#10;# Installing the complete CUDA Toolkit system-wide usually adds around 8GB to the image size.&#10;# Since most CUDA packages already installed through pip, there's no need to download the entire toolkit.&#10;# Therefore, we opt to install only the essential libraries.&#10;# Here is the package list for your reference: https://developer.download.nvidia.com/compute/cuda/repos/debian12/x86_64&#10;&#10;ADD https://developer.download.nvidia.com/compute/cuda/repos/debian12/x86_64/cuda-keyring_1.1-1_all.deb /tmp/cuda-keyring_x86_64.deb&#10;RUN --mount=type=cache,id=apt-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/var/cache/apt \&#10;    --mount=type=cache,id=aptlists-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/var/lib/apt/lists \&#10;    dpkg -i cuda-keyring_x86_64.deb &amp;&amp; \&#10;    rm -f cuda-keyring_x86_64.deb &amp;&amp; \&#10;    apt-get update &amp;&amp; \&#10;    apt-get install -y --no-install-recommends \&#10;    # !If you experience any related issues, replace the following line with `cuda-12-8` to obtain the complete CUDA package.&#10;    cuda-nvcc-12-8&#10;&#10;ENV PATH=&quot;/usr/local/cuda/bin:$PATH&quot;&#10;ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64&#10;ENV CUDA_VERSION=12.8&#10;ENV NVIDIA_REQUIRE_CUDA=cuda&gt;=12.8&#10;ENV CUDA_HOME=/usr/local/cuda&#10;&#10;########################################&#10;# Build stage&#10;########################################&#10;FROM base AS build&#10;&#10;# RUN mount cache for multi-arch: https://github.com/docker/buildx/issues/549#issuecomment-1788297892&#10;ARG TARGETARCH&#10;ARG TARGETVARIANT&#10;&#10;WORKDIR /app&#10;&#10;# Install uv&#10;COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/&#10;&#10;ENV UV_PROJECT_ENVIRONMENT=/venv&#10;ENV VIRTUAL_ENV=/venv&#10;ENV UV_LINK_MODE=copy&#10;ENV UV_PYTHON_DOWNLOADS=0&#10;ENV UV_INDEX=https://download.pytorch.org/whl/cu128&#10;&#10;# Install build dependencies&#10;RUN --mount=type=cache,id=apt-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/var/cache/apt \&#10;    --mount=type=cache,id=aptlists-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/var/lib/apt/lists \&#10;    apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; \&#10;    apt-get install -y --no-install-recommends python3-launchpadlib git curl&#10;&#10;# Install big dependencies separately for layer caching&#10;# !Please note that the version restrictions should be the same as pyproject.toml&#10;# No packages listed should be removed in the next `uv sync` command&#10;# If this happens, please update the version restrictions or update the uv.lock file&#10;RUN --mount=type=cache,id=uv-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/root/.cache/uv \&#10;    uv venv --system-site-packages /venv &amp;&amp; \&#10;    uv pip install --no-deps \&#10;    # torch (1.0GiB)&#10;    torch==2.7.0+cu128 \&#10;    # triton (149.3MiB)&#10;    triton&gt;=3.1.0 \&#10;    # tensorflow (615.0MiB)&#10;    tensorflow&gt;=2.16.1 \&#10;    # onnxruntime-gpu (215.7MiB)&#10;    onnxruntime-gpu==1.19.2&#10;&#10;# Install dependencies&#10;RUN --mount=type=cache,id=uv-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/root/.cache/uv \&#10;    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \&#10;    --mount=type=bind,source=uv.lock,target=uv.lock \&#10;    --mount=type=bind,source=sd-scripts,target=sd-scripts,rw \&#10;    uv sync --frozen --no-dev --no-install-project --no-editable&#10;&#10;# Replace pillow with pillow-simd (Only for x86)&#10;ARG TARGETPLATFORM&#10;RUN --mount=type=cache,id=apt-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/var/cache/apt \&#10;    --mount=type=cache,id=aptlists-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/var/lib/apt/lists \&#10;    if [ &quot;$TARGETPLATFORM&quot; = &quot;linux/amd64&quot; ]; then \&#10;    apt-get update &amp;&amp; apt-get install -y --no-install-recommends zlib1g-dev libjpeg62-turbo-dev build-essential &amp;&amp; \&#10;    uv pip uninstall pillow &amp;&amp; \&#10;    CC=&quot;cc -mavx2&quot; uv pip install pillow-simd; \&#10;    fi&#10;&#10;# Install jupyterlab&#10;RUN --mount=type=cache,id=uv-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/root/.cache/uv \&#10;    uv pip install jupyterlab&#10;&#10;########################################&#10;# Final stage&#10;########################################&#10;FROM base AS final&#10;&#10;ARG TARGETARCH&#10;ARG TARGETVARIANT&#10;&#10;WORKDIR /tmp&#10;&#10;# Install runtime dependencies&#10;RUN --mount=type=cache,id=apt-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/var/cache/apt \&#10;    --mount=type=cache,id=aptlists-$TARGETARCH$TARGETVARIANT,sharing=locked,target=/var/lib/apt/lists \&#10;    apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; \&#10;    apt-get install -y --no-install-recommends libgl1 libglib2.0-0 libjpeg62 libtcl8.6 libtk8.6 libgoogle-perftools-dev dumb-init&#10;&#10;# Fix missing libnvinfer7&#10;RUN ln -s /usr/lib/x86_64-linux-gnu/libnvinfer.so /usr/lib/x86_64-linux-gnu/libnvinfer.so.7 &amp;&amp; \&#10;    ln -s /usr/lib/x86_64-linux-gnu/libnvinfer_plugin.so /usr/lib/x86_64-linux-gnu/libnvinfer_plugin.so.7&#10;&#10;# Create user&#10;ARG UID&#10;RUN groupadd -g $UID $UID &amp;&amp; \&#10;    useradd -l -u $UID -g $UID -m -s /bin/sh -N $UID&#10;&#10;# Create directories with correct permissions&#10;RUN install -d -m 775 -o $UID -g 0 /dataset &amp;&amp; \&#10;    install -d -m 775 -o $UID -g 0 /licenses &amp;&amp; \&#10;    install -d -m 775 -o $UID -g 0 /app &amp;&amp; \&#10;    install -d -m 775 -o $UID -g 0 /venv &amp;&amp; \&#10;    install -d -m 775 -o $UID -g 0 /app/tmp&#10;&#10;# Copy licenses (OpenShift Policy)&#10;COPY --link --chmod=775 LICENSE.md /licenses/LICENSE.md&#10;&#10;# Copy dependencies and code (and support arbitrary uid for OpenShift best practice)&#10;COPY --link --chown=$UID:0 --chmod=775 --from=build /venv /venv&#10;COPY --link --chown=$UID:0 --chmod=775 . /app&#10;&#10;RUN chmod +x /app/run.sh&#10;&#10;ENV PATH=&quot;/venv/bin:$PATH&quot;&#10;ENV PYTHONPATH=&quot;/venv/lib/python3.11/site-packages&quot;&#10;&#10;ENV LD_LIBRARY_PATH=&quot;/venv/lib/python3.11/site-packages/nvidia/cudnn/lib:$LD_LIBRARY_PATH&quot;&#10;ENV LD_PRELOAD=libtcmalloc.so&#10;ENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python&#10;&#10;# Rich logging&#10;# https://rich.readthedocs.io/en/stable/console.html#interactive-mode&#10;ENV FORCE_COLOR=&quot;true&quot;&#10;ENV COLUMNS=&quot;100&quot;&#10;&#10;WORKDIR /app&#10;&#10;VOLUME [ &quot;/dataset&quot; ]&#10;&#10;# 7860: Kohya GUI&#10;# 8888: JupyterLab&#10;EXPOSE 7860 8888&#10;&#10;USER $UID&#10;&#10;STOPSIGNAL SIGINT&#10;RUN chmod +x /app/run.sh&#10;# Use dumb-init as PID 1 to handle signals properly&#10;ENTRYPOINT [&quot;dumb-init&quot;, &quot;--&quot;]&#10;CMD [&quot;/app/run.sh&quot;]&#10;&#10;ARG VERSION&#10;ARG RELEASE&#10;LABEL name=&quot;bmaltais/kohya_ss&quot; \&#10;    vendor=&quot;bmaltais&quot; \&#10;    maintainer=&quot;bmaltais&quot; \&#10;    # Dockerfile source repository&#10;    url=&quot;https://github.com/bmaltais/kohya_ss&quot; \&#10;    version=${VERSION} \&#10;    # This should be a number, incremented with each change&#10;    release=${RELEASE} \&#10;    io.k8s.display-name=&quot;kohya_ss&quot; \&#10;    summary=&quot;Kohya's GUI: This repository provides a Gradio GUI for Kohya's Stable Diffusion trainers(https://github.com/kohya-ss/sd-scripts).&quot; \&#10;    description=&quot;The GUI allows you to set the training parameters and generate and run the required CLI commands to train the model. This is the docker image for Kohya's GUI. For more information about this tool, please visit the following website: https://github.com/bmaltais/kohya_ss.&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/run.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/run.sh" />
              <option name="originalContent" value="#!/bin/bash&#10;set -e&#10;&#10;# Default values&#10;KOHYA_LISTEN_ADDRESS=${KOHYA_LISTEN_ADDRESS:-&quot;0.0.0.0&quot;}&#10;KOHYA_SERVER_PORT=${KOHYA_SERVER_PORT:-&quot;7860&quot;}&#10;JUPYTER_PORT=${JUPYTER_PORT:-&quot;8888&quot;}&#10;LOG_DIR=${LOG_DIR:-&quot;/app/logs&quot;}&#10;&#10;# Create workspace directory if it doesn't exist&#10;mkdir -p /tmp&#10;&#10;# Start Kohya's GUI in the background&#10;python3 kohya_gui.py \&#10;    --listen &quot;${KOHYA_LISTEN_ADDRESS}&quot; \&#10;    --server_port &quot;${KOHYA_SERVER_PORT}&quot; \&#10;    --headless \&#10;    --noverify &amp;&#10;&#10;JUPYTER_PASSWORD=${JUPYTER_PASSWORD:-${JUPYTER_LAB_PASSWORD:-}}&#10;&#10;mkdir -p &quot;$LOG_DIR&quot;&#10;&#10;# Use array for complex command&#10;jupyter_cmd=(&#10;    jupyter lab&#10;    --allow-root&#10;    --no-browser&#10;    --port=&quot;$JUPYTER_PORT&quot;&#10;    --ip=*&#10;    --FileContentsManager.delete_to_trash=False&#10;    --ContentsManager.allow_hidden=True&#10;    --ServerApp.terminado_settings='{&quot;shell_command&quot;:[&quot;/bin/bash&quot;]}'&#10;    --ServerApp.token=&quot;${JUPYTER_PASSWORD}&quot;&#10;    --ServerApp.password=&quot;${JUPYTER_PASSWORD}&quot;&#10;    --ServerApp.allow_origin=*&#10;    --FileContentsManager.preferred_dir=/tmp&#10;)&#10;&#10;# Start Jupyter Lab&#10;exec &quot;${jupyter_cmd[@]}&quot; 2&gt;&amp;1 | tee &quot;$LOG_DIR/jupyter.log&quot;&#10;" />
              <option name="updatedContent" value="#!/bin/bash&#10;set -e&#10;&#10;# Default values&#10;KOHYA_LISTEN_ADDRESS=${KOHYA_LISTEN_ADDRESS:-&quot;0.0.0.0&quot;}&#10;KOHYA_SERVER_PORT=${KOHYA_SERVER_PORT:-&quot;7860&quot;}&#10;JUPYTER_PORT=${JUPYTER_PORT:-&quot;8888&quot;}&#10;LOG_DIR=${LOG_DIR:-&quot;/app/logs&quot;}&#10;&#10;# Start Kohya's GUI in the background&#10;python3 kohya_gui.py \&#10;    --listen &quot;${KOHYA_LISTEN_ADDRESS}&quot; \&#10;    --server_port &quot;${KOHYA_SERVER_PORT}&quot; \&#10;    --headless \&#10;    --noverify &amp;&#10;&#10;JUPYTER_PASSWORD=${JUPYTER_PASSWORD:-${JUPYTER_LAB_PASSWORD:-}}&#10;&#10;mkdir -p &quot;$LOG_DIR&quot;&#10;&#10;# Use array for complex command&#10;jupyter_cmd=(&#10;    jupyter lab&#10;    --allow-root&#10;    --no-browser&#10;    --port=&quot;$JUPYTER_PORT&quot;&#10;    --ip=*&#10;    --FileContentsManager.delete_to_trash=False&#10;    --ContentsManager.allow_hidden=True&#10;    --ServerApp.terminado_settings='{&quot;shell_command&quot;:[&quot;/bin/bash&quot;]}'&#10;    --ServerApp.token=&quot;${JUPYTER_PASSWORD}&quot;&#10;    --ServerApp.password=&quot;${JUPYTER_PASSWORD}&quot;&#10;    --ServerApp.allow_origin=*&#10;    --FileContentsManager.preferred_dir=/app/tmp&#10;)&#10;&#10;# Start Jupyter Lab&#10;exec &quot;${jupyter_cmd[@]}&quot; 2&gt;&amp;1 | tee &quot;$LOG_DIR/jupyter.log&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>